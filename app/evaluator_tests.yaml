evaluator_tests:
  - name: "Number"
    input: "42"
    expected: "42"

  - name: "String"
    input: '"hello"'
    expected: "hello"

  - name: "Boolean"
    input: "True({})"
    expected: "True({})"

  - name: "Nil"
    input: "{}"
    expected: "{}"

  - name: "Addition"
    input: "2 + 3"
    expected: "5"

  - name: "Subtraction"
    input: "5 - 2"
    expected: "3"

  - name: "Multiplication"
    input: "4 * 6"
    expected: "24"

  - name: "Division"
    input: "8 / 2"
    expected: "4"

  - name: "LessThan"
    input: "3 < 5"
    expected: "True({})"

  - name: "LessThanOrEqual"
    input: "7 <= 5"
    expected: "False({})"

  - name: "GreaterThan"
    input: "5 > 3"
    expected: "True({})"

  - name: "GreaterThanOrEqual"
    input: "5 >= 3"
    expected: "True({})"

  - name: "Equality"
    input: "1 == 1"
    expected: "True({})"

  - name: "Inequality"
    input: "1 != 2"
    expected: "True({})"

  - name: "UnaryMinus"
    input: "-42"
    expected: "-42"

  - name: "UnaryMinusFloat"
    input: "-73"
    expected: "-73"

  - name: "LogicalNot"
    input: "!True({})"
    expected: "False({})"

  - name: "LogicalNotNumber"
    input: "!10.40"
    expected: "False({})"

  - name: "LogicalNotGrouped"
    input: "!(!False({}))"
    expected: "True({})"

  - name: "Grouping"
    input: "(2 + 3)"
    expected: "5"

  - name: "ComplexExpression"
    input: "2 + 3 * 4"
    expected: "14"

  - name: "GroupedExpression"
    input: "(2 + 3) * 4"
    expected: "20"

  - name: "NestedGrouping"
    input: "((1 + 2) * 3)"
    expected: "9"

  - name: "MixedTypes"
    input: '"hello" == "world"'
    expected: "False({})"

  - name: "FloatNumbers"
    input: "3.14 + 2.71"
    expected: "5.85"

  - name: "GroupedString"
    input: '( "hello" )'
    expected: "hello"

  - name: "StringConcat"
    input: '"hel" + "lo"'
    expected: "hello"

  - name: "StringEqTrue"
    input: '"hello" == "hello"'
    expected: "True({})"

  - name: "StringNeqTrue"
    input: '"hello" != "world"'
    expected: "True({})"

  - name: "StringEqFalse"
    input: '"hello" == "world"'
    expected: "False({})"

  - name: "StringNeqFalse"
    input: '"hello" != "hello"'
    expected: "False({})"

  - name: "Print"
    input: 'perform Log("hello")'
    expected: "{}"

  - name: "Print"
    input: 'perform Log(5)'
    expected: "{}"

  - name: "AddNumbersToString"
    input: '4 + "a" + 7'
    expected: "Evaluation error: Operands must be two numbers or two strings"


  - name: "Vars"
    input: |
      a = "hello"
      a
    expected: "hello"

  - name: "VarAssign"
    input: |
      a = "hello"
      a = "world"
      a
    expected: "world"

  - name: "Block"
    input: |
      {
        a = {
          1 + 1
        }
        a
      }
    expected: "2"

  - name: "NestedScope"
    input: |
      {
        a = 1
        {
          a = 2
        }
        a
      }
    expected: "2"

  - name: "NestedScopeRedefine"
    input: |
      {
        a = 1
        {
          a = 2
        }
        a
      }
    expected: "1"

  - name: "IfTrue"
    input: |
      a = 1
      match True({}) {
        True(_) -> a = 2
        False(_) -> a
      }
      a
    expected: "2"
  - name: "IfFalse"
    input: |
      a = 1
      match False({}) {
        True(_) -> a = 2
        False(_) -> a
      }
      a
    expected: "1"
  - name: "Or"
    input: |
      False({}) or False({}) or True({})
    expected: "True({})"
  - name: "OrFirstTruthy"
    input: |
      27 or True({})
    expected: "27"
  - name: "AndLastTruthy"
    input: |
      27 and 67
    expected: "67"
  - name: "AndFalse"
    input: |
      False({}) and 56
    expected: "False({})"
  - name: "While"
    input: |
      foo = 0
      while (foo < 3) perform Log(foo = foo + 1)
    expected: "{}"
    expectedOutput: |
      1
      2
      3
  - name: "For"
    input: |
      for (world = 0; world < 3; world = world + 1) {
        perform Log(world)
      }
    expected: "{}"
    expectedOutput: |
      0
      1
      2
  - name: "Clock"
    input: |
      !clock({}) > 0
    expected: "True({})"
  - name: "zero-arg fun"
    input: |
      foo = |_| { perform Log("hello") }
      foo({})
    expected: "{}"
    expectedOutput: "hello\n"
  - name: "print fun"
    input: |
      foo = |_| { perform Log("hello") }
      perform Log(foo)
    expected: "{}"
    expectedOutput: "<fn foo>\n"
  - name: "Function with one argument"
    input: |
      greet = |name| {
        perform Log("Hello, " + name + "!")
      }
      greet("World")
    expected: "{}"
    expectedOutput: "Hello, World!\n"
  - name: "Function with two arguments"
    input: |
      add = |a, b| {
        perform Log(a + b)
      }
      add(10, 20)
    expected: "{}"
    expectedOutput: "30\n"
  - name: "Function with three arguments"
    input: |
      multiply = |x, y, z| {
        perform Log(x * y * z)
      }
      multiply(2, 3, 4)
    expected: "{}"
    expectedOutput: "24\n"
  - name: "Function with expression arguments"
    input: |
      add = |a, b| {
        perform Log(a + b)
      }
      add(5 * 2, 3 + 7)
    expected: "{}"
    expectedOutput: "20\n"
  - name: "Function with wrong argument count"
    input: |
      add = |a, b| {
        perform Log(a + b)
      }
      add(1)
    expected: "Evaluation error: Expected 2 arguments but got 1"
  - name: "Function arguments are scoped"
    input: |
      test = |x| {
        y = x + 1
        perform Log(y)
      }
      test(5)
      perform Log(x)
    expected: "Evaluation error: Undefined variable 'x'"
    expectedOutput: "6\n"

  - name: "Records"
    input: |
      alice = {name: "Alice"}
      bob = {name: "Bob", height: 192}
      alice.name
    expected: "Alice"

  - name: "Record spread"
    input: |
      bob = {name: "Bob", height: 192}
      {height: 100, ..bob}
    expected: "{height: 100, name: \"Bob\"}"

  - name: "Lists"
    input: |
      items = [1, 2]
      items = [10, ..items]
      total = !list_fold(items, 0, |a, b| a + b)
      total
    expected: "13"

  - name: "Match expressions"
    input: |
      match !int_parse("not a number") {
        Ok(value) -> value
        Error(_) -> -1
      }
    expected: "-1"

  - name: "Match union types"
    input: |
      match Cat("felix") {
        Cat(name) -> name
        _ -> "wild"
      }
    expected: "felix"

  - name: "Let destructuring"
    input: |
      {food: f} = {food: "Greens", action: "eat"}
      f
    expected: "Greens"

  - name: "Higher order functions"
    input: |
      inc = |x| x + 1
      twice = |f, x| {
        f(f(x))
      }
      inc2 = twice(inc)
      inc2(5)
    expected: "7"

  - name: "Named references"
    input: |
      std = @std:1
      std.list.contains([1], 0)
    expected: "False({})"