parser_tests:
  - name: "Number"
    input: "42"
    expected: "42.0"

  - name: "String"
    input: '"hello"'
    expected: "hello"

  - name: "Boolean"
    input: "true"
    expected: "true"

  - name: "Nil"
    input: "nil"
    expected: "nil"

  - name: "Addition"
    input: "2 + 3"
    expected: "(+ 2.0 3.0)"

  - name: "Subtraction"
    input: "5 - 2"
    expected: "(- 5.0 2.0)"

  - name: "Multiplication"
    input: "4 * 6"
    expected: "(* 4.0 6.0)"

  - name: "Division"
    input: "8 / 2"
    expected: "(/ 8.0 2.0)"

  - name: "Comparison"
    input: "3 < 5"
    expected: "(< 3.0 5.0)"

  - name: "Equality"
    input: "1 == 1"
    expected: "(== 1.0 1.0)"

  - name: "Inequality"
    input: "1 != 2"
    expected: "(!= 1.0 2.0)"

  - name: "UnaryMinus"
    input: "-42"
    expected: "(- 42.0)"

  - name: "UnaryBang"
    input: "!true"
    expected: "(! true)"

  - name: "Grouping"
    input: "(2 + 3)"
    expected: "(group (+ 2.0 3.0))"

  - name: "ComplexExpression"
    input: "2 + 3 * 4"
    expected: "(+ 2.0 (* 3.0 4.0))"

  - name: "GroupedExpression"
    input: "(2 + 3) * 4"
    expected: "(* (group (+ 2.0 3.0)) 4.0)"

  - name: "NestedGrouping"
    input: "((1 + 2) * 3)"
    expected: "(group (* (group (+ 1.0 2.0)) 3.0))"

  - name: "MixedTypes"
    input: '"hello" == "world"'
    expected: "(== hello world)"

  - name: "FloatNumbers"
    input: "3.14 + 2.71"
    expected: "(+ 3.14 2.71)"

  - name: "Print"
    input: 'print "hello"'
    expected: '(print hello)'

  - name: "SeqPrints"
    input: |
      print "a";
      print "b";
    expected: '(seq (print a) (print b))'

  - name: "Var"
    input: var world = 10;
    expected: '(var world 10.0)'

  - name: "VarNil"
    input: var world;
    expected: 'Parse error: expect expression'

  - name: "Assign"
    input: a = b = 1
    expected: '(= a (= b 1.0))'

  - name: "Block"
    input: |
      {
        print "a";
        print "b";
      }
    expected: '(block (print a) (print b))'
  - name: "Blocks"
    input: |
      {
        1
      }
      {
        2
      }
    expected: '(seq (block 1.0) (block 2.0))'
  - name: "Statement before and after block"
    input: |
      1
      {
        2
      }
      3
    expected: '(seq 1.0 (block 2.0) 3.0)'
  - name: "if"
    input: |
      if (true) {
        1
      }
    expected: '(if true (block 1.0))'
  - name: "ifElse"
    input: |
      if (true) {
        1
      } else {
        2
      }
    expected: '(if true (block 1.0) (block 2.0))'
  - name: "ifNoBlock"
    input: |
      if (true) 1;
      else 2;
    expected: '(if true 1.0 2.0)'
  - name: "Or"
    input: |
      print false or false or true;
    expected: '(print (or (or false false) true))'
  - name: "And"
    input: |
      true and false
    expected: '(and true false)'
  
  - name: "While"
    input: |
      while (x < 3) print x;
    expected: '(while (< x 3.0) (print x))'
  
  - name: "WhileBlock"
    input: |
      while (x < 10) {
        print x;
        x = x + 1;
      }
    expected: '(while (< x 10.0) (block (print x) (= x (+ x 1.0))))'
  - name: "For"
    input: |
      for (var baz = 0; baz < 3; baz) print baz = baz + 1;
    expected: '(for (var baz 0.0) (< baz 3.0) baz (print (= baz (+ baz 1.0))))'
  - name: "EmptyFor"
    input: |
      for (;;) {}
    expected: '(for nil nil nil (block))'