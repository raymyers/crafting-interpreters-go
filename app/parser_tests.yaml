parser_tests:
  - name: "FunctionCallNoArgs"
    input: "foo({})"
    expected: "(call foo {})"

  - name: "FunctionCallOneArg"
    input: "foo(42)"
    expected: "(call foo 42.0)"

  - name: "FunctionCallMultipleArgs"
    input: "foo(1, 2, 3)"
    expected: "(call foo 1.0 2.0 3.0)"

  - name: "BuiltinCall"
    input: "!int_add(1, 2)"
    expected: "(builtin int_add 1.0 2.0)"

  - name: "ChainedFunctionCalls"
    input: "foo({})(bar)"
    expected: "(call (call foo {}) bar)"
  - name: "Number"
    input: "42"
    expected: "42.0"

  - name: "String"
    input: '"hello"'
    expected: "hello"

  - name: "Boolean"
    input: "True({})"
    expected: "(union True {})"

  - name: "EmptyRecord"
    input: "{}"
    expected: "{}"

  - name: "Addition"
    input: "!int_add(2, 3)"
    expected: "(builtin int_add 2.0 3.0)"

  - name: "Subtraction"
    input: "!int_subtract(5, 2)"
    expected: "(builtin int_subtract 5.0 2.0)"

  - name: "Multiplication"
    input: "!int_multiply(4, 6)"
    expected: "(builtin int_multiply 4.0 6.0)"

  - name: "Division"
    input: "!int_divide(8, 2)"
    expected: "(builtin int_divide 8.0 2.0)"

  - name: "Comparison"
    input: "!int_less_than(3, 5)"
    expected: "(builtin int_less_than 3.0 5.0)"

  - name: "Equality"
    input: "!equal(1, 1)"
    expected: "(builtin equal 1.0 1.0)"

  - name: "Inequality"
    input: "!not_equal(1, 2)"
    expected: "(builtin not_equal 1.0 2.0)"

  - name: "UnaryMinus"
    input: "!int_negate(42)"
    expected: "(builtin int_negate 42.0)"

  - name: "LogicalNot"
    input: "!not(True({}))"
    expected: "(builtin not (union True {}))"

  - name: "Grouping"
    input: "(!int_add(2, 3))"
    expected: "(group (builtin int_add 2.0 3.0))"

  - name: "ComplexExpression"
    input: "!int_add(2, !int_multiply(3, 4))"
    expected: "(builtin int_add 2.0 (builtin int_multiply 3.0 4.0))"

  - name: "GroupedExpression"
    input: "!int_multiply((!int_add(2, 3)), 4)"
    expected: "(builtin int_multiply (group (builtin int_add 2.0 3.0)) 4.0)"

  - name: "NestedGrouping"
    input: "((!int_multiply((!int_add(1, 2)), 3)))"
    expected: "(group (group (builtin int_multiply (group (builtin int_add 1.0 2.0)) 3.0)))"

  - name: "MixedTypes"
    input: '!equal("hello", "world")'
    expected: "(builtin equal hello world)"

  - name: "FloatNumbers"
    input: "!float_add(3.14, 2.71)"
    expected: "(builtin float_add 3.14 2.71)"

  - name: "Effect"
    input: 'perform Log("hello")'
    expected: '(perform Log hello)'

  - name: "SeqEffects"
    input: |
      || {
        _ = perform Log("a")
        perform Log("b")
      }
    expected: '(thunk (seq (= _ (perform Log a)) (perform Log b)))'

  - name: "Assignment"
    input: |
      || {
        world = 10
        world
      }
    expected: '(thunk (seq (= world 10.0) world))'

  - name: "ChainedAssign"
    input: |
      || {
        a = b = 1
        a
      }
    expected: '(thunk (seq (= a (= b 1.0)) a))'

  - name: "Thunk"
    input: |
      || {
        perform Log("a")
        perform Log("b")
      }
    expected: '(thunk (seq (perform Log a) (perform Log b)))'
  - name: "Records"
    input: |
      {name: "Alice", age: 30}
    expected: '(record (field name Alice) (field age 30.0))'
  - name: "RecordAccess"
    input: |
      alice.name
    expected: '(access alice name)'
  - name: "List"
    input: |
      [1, 2, 3]
    expected: '(list 1.0 2.0 3.0)'
  - name: "ListSpread"
    input: |
      [0, ..items]
    expected: '(list 0.0 (spread items))'
  - name: "Match"
    input: |
      match value {
        Ok(x) -> x
        Error(_) -> 0
      }
    expected: '(match value (case (pattern Ok x) x) (case (pattern Error _) 0.0))'
  - name: "Lambda"
    input: |
      |x, y| { !int_add(x, y) }
    expected: '(lambda (args x y) (builtin int_add x y))'
  - name: "NamedRef"
    input: |
      @std:1
    expected: '(named_ref std 1)'
  
  - name: "FixedPoint"
    input: |
      !fix(|loop, x| {
        match !int_less_than(x, 3) {
          True(_) -> loop(!int_add(x, 1))
          False(_) -> x
        }
      })
    expected: '(builtin fix (lambda (args loop x) (match (builtin int_less_than x 3.0) (case (pattern True _) (call loop (builtin int_add x 1.0))) (case (pattern False _) x))))'
  
  - name: "Handle"
    input: |
      handle Alert(
        |value, resume| {
          resume({})
        },
        |_| { {} }
      )
    expected: '(handle Alert (lambda (args value resume) (call resume {})) (lambda (args _) {}))'
  - name: "Destructuring"
    input: |
      {food: f} = record
    expected: '(= (destructure (field food f)) record)'
  - name: "Union"
    input: |
      Cat("felix")
    expected: '(union Cat felix)'
  - name: "EmptyThunk"
    input: |
      || {}
    expected: '(thunk {})'