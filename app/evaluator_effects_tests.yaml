tests:
  - name: "Basic perform"
    input: 'perform Alert("test")'
    expected: '{Alert [{test}] {0xc0000980d0 0xc0000a4088}}'
    description: "Basic perform should return an EffectValue"

  - name: "Simple handle"
    input: 'handle Alert(|value, resume| value, perform Alert("test"))'
    expected: "test"
    description: "Simple handler that returns the effect value"

  - name: "Handle with resume"
    input: 'handle Alert(|value, resume| resume({}), perform Alert("test"))'
    expected: '{return: {}, alerts: [RESUME_CALLED]}'
    description: "Handler that calls resume should return resume result"

  - name: "Effect in lambda"
    input: |
      f = |_| perform Alert("test")
      handle Alert(|value, resume| value, f({}))
    expected: "test"
    description: "Effects inside lambdas should bubble up to handlers"

  - name: "Single effect in sequence"
    input: |
      run = |_| {
        _ = perform Alert("first")
        {}
      }
      handle Alert(|value, resume| value, run({}))
    expected: "first"
    description: "First effect in sequence should be caught"

  - name: "Multiple effects with resume"
    input: |
      run = |_| {
        _ = perform Alert("first")
        _ = perform Alert("second")
        {}
      }
      handle Alert(|value, resume| {
        _ = perform Log("Handler called for: " + value)
        result = resume({})
        _ = perform Log("Resume returned")
        result
      }, run({}))
    expected: '{return: {}, alerts: [RESUME_CALLED]}'
    description: "Multiple effects should be handled sequentially with resume"

  - name: "Effect accumulation pattern"
    input: |
      run = |_| {
        _ = perform Alert("first")
        _ = perform Alert("second")
        {}
      }
      handle Alert(|value, resume| {
        {return: return, alerts: alerts} = resume({})
        {return: return, alerts: [value, ..alerts]}
      }, run({}))
    expected: '{return: {}, alerts: ["first", "second"]}'
    description: "Handler should accumulate effects using resume pattern"

  - name: "Nested handlers"
    input: |
      handle Alert(|value, resume| "outer:" + value,
        handle Alert(|value, resume| "inner:" + value,
          perform Alert("test")))
    expected: "inner:test"
    description: "Inner handler should catch effect before outer handler"

  - name: "Handler fallback"
    input: |
      handle Alert(|value, resume| value, |_| "fallback")
    expected: "fallback"
    description: "Fallback lambda should be called when no effects occur"

  - name: "Complex Handle test case"
    input: |
      capture = |exec| {
        handle Alert(|value, resume| {
            {return: return, alerts: alerts} = resume({})
            {return: return, alerts: [value, ..alerts]}
          },
          |_| {alerts: [], return: exec({})}
        )
      }
      run = |_| {
        _ = perform Alert("first")
        _ = perform Alert("second")
        {}
      }
      capture(run)
    expected: '{return: {}, alerts: ["first", "second"]}'
    description: "Full Handle test case with effect accumulation"